# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dAbiXQIDDbW0PVLUJS6-U1DLGG5EKn2z


!pip install yfinance -q
!pip install transformers pandas
!pip install torch    
    
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#import yfinance as yf
import plotly.graph_objects as go
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification


df= pd.read_csv("apple-news_data.csv")
df.head()
df["content"]


# Choose a pre-trained DistilBERT model for sentiment analysis
model_name = "distilbert-base-uncased-finetuned-sst-2-english"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)


def predict_sentiment(text, tokenizer, model):
  encoded_text = tokenizer(text, return_tensors="pt")
  with torch.no_grad():
    output = model(**encoded_text)
    predictions = torch.nn.functional.softmax(output.logits, dim=-1)
    sentiment = torch.argmax(predictions).item()
    sentiment_labels = ["Positive", "Negative", "Neutral"]  # Modify based on your model

    # Return a dictionary with sentiment class and score
    return {
        "class": sentiment_labels[sentiment],
        "score": predictions.max().item()
    }

# Get sentiment analysis results as dictionaries
sentiment_analysis = df["content"].apply(lambda x: predict_sentiment(x, tokenizer, model))

# Add the results as separate columns (optional)
df["sentiment_analysis"] = sentiment_analysis

print(df.head())



# Today's date
today = pd.Timestamp('today')
# Define dates for last week and last month (considering ISO 8601 format)
last_week_start = today - pd.Timedelta(days = 7)
last_week_end = today - pd.Timedelta(days = 1)  # Exclude today from last week
last_month_start = today.replace(day=1) - pd.DateOffset(months=1)
last_month_end = today.replace(day=1) - pd.DateOffset(days=1)  # Exclude today from last month

#Convert the last_week_start and last_week_end variables to strings:

last_week_start = str(last_week_start)
last_week_end = str(last_week_end)
last_month_start = str(last_month_start)
last_month_end = str(last_month_end)
# Filter data for last week and last month using 'date' column

last_week_data = df.loc[(df['date'] >= last_week_start) & (df['date'] <= last_week_end)]
last_month_data = df.loc[(df['date'] >= last_month_start) & (df['date'] <= last_month_end)]

# Get sentiment analysis results for last week and last month
last_week_sentiment = last_week_data["content"].apply(lambda x: predict_sentiment(x, tokenizer, model))
last_month_sentiment = last_month_data["content"].apply(lambda x: predict_sentiment(x, tokenizer, model))

# Print sentiment distribution for last week and last month
print("Last Week Sentiment:")
print(last_week_sentiment.value_counts())  # Count occurrences of each sentiment class

print("\nLast Month Sentiment:")
print(last_month_sentiment.value_counts())

